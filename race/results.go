package race

import (
	"biathlon-prototype/models"
	"biathlon-prototype/utils"
	"fmt"
	"math"
	"sort"
)

func (r *Race) PrintResults() {
	// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ–¥ –≤—ã–≤–æ–¥–æ–º
	r.CalculateStats()

	var results []*models.Athlete

	// –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
	for _, athlete := range r.Athletes {
		results = append(results, athlete)
	}

	// –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É –∏ –≤—Ä–µ–º–µ–Ω–∏
	sort.Slice(results, func(i, j int) bool {
		if results[i].Status == results[j].Status {
			if results[i].FinishTime != nil && results[j].FinishTime != nil {
				return results[i].FinishTime.Before(*results[j].FinishTime)
			}
			return results[i].ID < results[j].ID
		}
		return results[i].Status < results[j].Status
	})

	fmt.Println("\nüèÅ –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç:")
	for pos, athlete := range results {
		fmt.Printf("%d. –£—á–∞—Å—Ç–Ω–∏–∫ %d - %s\n", pos+1, athlete.ID, athlete.Status)

		// –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏
		if athlete.StartTimeActual != nil {
			if athlete.FinishTime != nil {
				totalTime := athlete.FinishTime.Sub(*athlete.StartTimeActual)
				fmt.Printf("   –û–±—â–µ–µ –≤—Ä–µ–º—è: %s\n", utils.FormatDuration(totalTime))
			}

			// –í—Ä–µ–º—è –∫—Ä—É–≥–æ–≤ —Å —Ä–∞—Å—á–µ—Ç–æ–º —Å–∫–æ—Ä–æ—Å—Ç–∏
			for i, lapTime := range athlete.LapTimes {
				if i < len(athlete.LapTimes) {
					speed := float64(r.Config.LapLen) / lapTime.Seconds()
					fmt.Printf("   –ö—Ä—É–≥ %d: %s (%.2f –º/—Å)\n",
						i+1, utils.FormatDuration(lapTime), speed)
				}
			}

			// –®—Ç—Ä–∞—Ñ–Ω–æ–µ –≤—Ä–µ–º—è
			totalPenaltySeconds := 0
			for i, penaltyTime := range athlete.PenaltyTimes {
				if penaltyTime > 0 {
					speed := float64(r.Config.PenaltyLen) / penaltyTime.Seconds()
					totalPenaltySeconds += int(penaltyTime.Seconds())
					fmt.Printf("   –®—Ç—Ä–∞—Ñ %d: %s (%.2f –º/—Å)\n",
						i+1, utils.FormatDuration(penaltyTime), math.Round(speed*100)/100)
				}
			}
			if totalPenaltySeconds > 0 {
				fmt.Printf("   –û–±—â–µ–µ —à—Ç—Ä–∞—Ñ–Ω–æ–µ –≤—Ä–µ–º—è: %d —Å–µ–∫\n", totalPenaltySeconds)
			}
		}

		// –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
		fmt.Printf("   –û–±—â–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: %d –º\n", athlete.TotalDistance)
		if athlete.AvgSpeed > 0 {
			fmt.Printf("   –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: %.2f –º/—Å\n", athlete.AvgSpeed)
		}
		if athlete.Shots > 0 {
			fmt.Printf("   –¢–æ—á–Ω–æ—Å—Ç—å —Å—Ç—Ä–µ–ª—å–±—ã: %.1f%%\n", athlete.Accuracy)
		}
		fmt.Printf("   –°—Ç—Ä–µ–ª—å–±–∞: %d/%d –ø–æ–ø–∞–¥–∞–Ω–∏–π\n\n",
			athlete.Hits, athlete.Shots)
	}
}
