package race

import (
	"biathlon-prototype/configs"
	"biathlon-prototype/models"
	"bytes"
	"io"
	"os"
	"sort"
	"strings"
	"testing"
	"time"
)

func TestPrintResults(t *testing.T) {
	// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –≥–æ–Ω–∫—É
	race := createTestRaceWithAthletes()

	// –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—ã–≤–æ–¥
	old := os.Stdout
	r, w, err := os.Pipe()
	if err != nil {
		t.Fatalf("Failed to create pipe: %v", err)
	}
	os.Stdout = w

	// –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	race.PrintResults()

	// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º stdout
	w.Close()
	os.Stdout = old

	var buf bytes.Buffer
	_, err = io.Copy(&buf, r)
	if err != nil {
		t.Fatalf("Error reading output: %v", err)
	}

	output := buf.String()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤—ã–≤–æ–¥–∞
	expected := []string{
		"üèÅ –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç:",
		"1. –£—á–∞—Å—Ç–Ω–∏–∫ 1 - Finished",
		"–û–±—â–µ–µ –≤—Ä–µ–º—è:",
		"–ö—Ä—É–≥ 1:",
		"–û–±—â–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: 8000 –º",
		"2. –£—á–∞—Å—Ç–Ω–∏–∫ 2 - Finished",
		"3. –£—á–∞—Å—Ç–Ω–∏–∫ 3 - Disqualified",
	}

	for _, exp := range expected {
		if !strings.Contains(output, exp) {
			t.Errorf("Expected output to contain %q", exp)
		}
	}
}

func TestResultsSorting(t *testing.T) {
	r := createTestRaceWithAthletes()
	r.CalculateStats()

	results := r.getSortedResults()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—è–¥–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
	if len(results) != 3 {
		t.Fatalf("Expected 3 results, got %d", len(results))
	}

	// –ü–µ—Ä–≤—ã–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫ 1 (—Ñ–∏–Ω–∏—à–∏—Ä–æ–≤–∞–ª –ø–µ—Ä–≤—ã–º)
	if results[0].ID != 1 {
		t.Errorf("Expected first place to be athlete 1, got %d", results[0].ID)
	}

	// –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫ 3 (–¥–∏—Å–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω)
	if results[2].ID != 3 {
		t.Errorf("Expected last place to be athlete 3, got %d", results[2].ID)
	}
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –≥–æ–Ω–∫–∏ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
func createTestRaceWithAthletes() *Race {
	cfg := configs.Config{
		Laps:        2,
		LapLen:      4000,
		PenaltyLen:  150,
		FiringLines: 2,
		Start:       "10:00:00",
		StartDelta:  "00:01:00",
	}
	r, _ := NewRace(cfg)

	// –£—á–∞—Å—Ç–Ω–∏–∫ 1 - —É—Å–ø–µ—à–Ω–æ —Ñ–∏–Ω–∏—à–∏—Ä–æ–≤–∞–ª
	athlete1 := &models.Athlete{
		ID:              1,
		Status:          models.StatusFinished,
		StartTimeActual: timePtr(time.Date(0, 1, 1, 10, 0, 0, 0, time.UTC)),
		FinishTime:      timePtr(time.Date(0, 1, 1, 11, 30, 0, 0, time.UTC)),
		LapTimes:        []time.Duration{30 * time.Minute, 30 * time.Minute},
		PenaltyTimes:    []time.Duration{2 * time.Minute},
		Shots:           10,
		Hits:            8,
	}
	r.Athletes[1] = athlete1

	// –£—á–∞—Å—Ç–Ω–∏–∫ 2 - —Ñ–∏–Ω–∏—à–∏—Ä–æ–≤–∞–ª –ø–æ–∑–∂–µ
	athlete2 := &models.Athlete{
		ID:              2,
		Status:          models.StatusFinished,
		StartTimeActual: timePtr(time.Date(0, 1, 1, 10, 1, 0, 0, time.UTC)),
		FinishTime:      timePtr(time.Date(0, 1, 1, 11, 35, 0, 0, time.UTC)),
		LapTimes:        []time.Duration{32 * time.Minute, 32 * time.Minute},
		PenaltyTimes:    []time.Duration{3 * time.Minute},
		Shots:           10,
		Hits:            7,
	}
	r.Athletes[2] = athlete2

	// –£—á–∞—Å—Ç–Ω–∏–∫ 3 - –¥–∏—Å–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
	athlete3 := &models.Athlete{
		ID:     3,
		Status: models.StatusDisqualified,
		Shots:  5,
		Hits:   2,
	}
	r.Athletes[3] = athlete3

	return r
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
func (r *Race) getSortedResults() []*models.Athlete {
	var results []*models.Athlete
	for _, athlete := range r.Athletes {
		results = append(results, athlete)
	}

	sort.Slice(results, func(i, j int) bool {
		if results[i].Status == results[j].Status {
			if results[i].FinishTime != nil && results[j].FinishTime != nil {
				return results[i].FinishTime.Before(*results[j].FinishTime)
			}
			return results[i].ID < results[j].ID
		}
		return results[i].Status < results[j].Status
	})

	return results
}

func timePtr(t time.Time) *time.Time {
	return &t
}
